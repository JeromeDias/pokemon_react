{"ast":null,"code":"// import React, { FunctionComponent, useState } from 'react';\n// import { useHistory } from 'react-router-dom';\n// import Pokemon from '../models/pokemon';\n// import formatType from '../helpers/format-type';\n// type Props = {\n//   pokemon: Pokemon\n// };\n// type Field = {\n//   value?: any,\n//   error?:string,\n//   isValid?: boolean\n// }\n// type Form = {\n//   name: Field,\n//   hp: Field,\n//   cp: Field,\n//   types: Field\n// }\n// const PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n//   const [form, setForm] = useState<Form>({\n//     name: { value: pokemon.name, isValid: true},\n//     hp: { value: pokemon.hp, isValid: true},\n//     cp: { value: pokemon.cp, isValid: true},\n//     types: { value: pokemon.types, isValid: true},\n//   });\n//   const history = useHistory();\n//   const types: string[] = [\n//     'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n//     'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n//   ];\n//   const hasType  = (type: string): boolean => {\n//     return form.types.value.includes(type);\n//   }\n//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const fieldName: string = e.target.name;\n//     const fieldValue: string = e.target.value;\n//     const newField: Field = {[fieldName] : { value: fieldValue }};\n//     setForm({...form, ...newField});\n//   }\n//   const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n//     const checked = e.target.checked;\n//     let newField: Field;\n//     if(checked) {\n//       const newTypes: string[] = form.types.value.concat([type]);\n//       newField = { value: newTypes };\n//     } else {\n//       const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n//       newField = { value: newTypes };\n//     }\n//     setForm({...form, ...{ types: newField }});\n//   }\n//   const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n//     e.preventDefault();\n//     console.log(form);\n//     history.push(`/pokemons/${pokemon.id}`);\n//   }\n//   return (\n//     <form onSubmit={e => handleSubmit(e)}>\n//       <div className=\"row\">\n//         <div className=\"col s12 m8 offset-m2\">\n//           <div className=\"card hoverable\"> \n//             <div className=\"card-image\">\n//               <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n//             </div>\n//             <div className=\"card-stacked\">\n//               <div className=\"card-content\">\n//                 {/* Pokemon name */}\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"name\">Nom</label>\n//                   <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange}></input>\n//                 </div>\n//                 {/* Pokemon hp */}\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"hp\">Point de vie</label>\n//                   <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange}></input>\n//                 </div>\n//                 {/* Pokemon cp */}\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"cp\">Dégâts</label>\n//                   <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange}></input>\n//                 </div>\n//                 {/* Pokemon types */}\n//                 <div className=\"form-group\">\n//                   <label>Types</label>\n//                   {types.map(type => (\n//                     <div key={type} style={{marginBottom: '10px'}}>\n//                       <label>\n//                         <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n//                         <span>\n//                           <p className={formatType(type)}>{ type }</p>\n//                         </span>\n//                       </label>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//               <div className=\"card-action center\">\n//                 {/* Submit button */}\n//                 <button type=\"submit\" className=\"btn\">Valider</button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </form>\n//   );\n// };\n// export default PokemonForm;","map":{"version":3,"sources":["C:/xampp/htdocs/pokemon_react/src/components/pokemon-form.tsx"],"names":[],"mappingssourcesContent":["// import React, { FunctionComponent, useState } from 'react';\r\n// import { useHistory } from 'react-router-dom';\r\n// import Pokemon from '../models/pokemon';\r\n// import formatType from '../helpers/format-type';\r\n  \r\n// type Props = {\r\n//   pokemon: Pokemon\r\n// };\r\n\r\n// type Field = {\r\n//   value?: any,\r\n//   error?:string,\r\n//   isValid?: boolean\r\n// }\r\n\r\n// type Form = {\r\n//   name: Field,\r\n//   hp: Field,\r\n//   cp: Field,\r\n//   types: Field\r\n// }\r\n  \r\n// const PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\r\n\r\n//   const [form, setForm] = useState<Form>({\r\n//     name: { value: pokemon.name, isValid: true},\r\n//     hp: { value: pokemon.hp, isValid: true},\r\n//     cp: { value: pokemon.cp, isValid: true},\r\n//     types: { value: pokemon.types, isValid: true},\r\n//   });\r\n  \r\n//   const history = useHistory();\r\n\r\n//   const types: string[] = [\r\n//     'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n//     'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n//   ];\r\n\r\n//   const hasType  = (type: string): boolean => {\r\n//     return form.types.value.includes(type);\r\n//   }\r\n\r\n//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     const fieldName: string = e.target.name;\r\n//     const fieldValue: string = e.target.value;\r\n//     const newField: Field = {[fieldName] : { value: fieldValue }};\r\n    \r\n//     setForm({...form, ...newField});\r\n//   }\r\n\r\n//   const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n//     const checked = e.target.checked;\r\n//     let newField: Field;\r\n\r\n//     if(checked) {\r\n//       const newTypes: string[] = form.types.value.concat([type]);\r\n//       newField = { value: newTypes };\r\n//     } else {\r\n//       const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n//       newField = { value: newTypes };\r\n//     }\r\n\r\n//     setForm({...form, ...{ types: newField }});\r\n//   }\r\n   \r\n//   const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\r\n//     e.preventDefault();\r\n//     console.log(form);\r\n//     history.push(`/pokemons/${pokemon.id}`);\r\n//   }\r\n\r\n\r\n//   return (\r\n//     <form onSubmit={e => handleSubmit(e)}>\r\n//       <div className=\"row\">\r\n//         <div className=\"col s12 m8 offset-m2\">\r\n//           <div className=\"card hoverable\"> \r\n//             <div className=\"card-image\">\r\n//               <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n//             </div>\r\n//             <div className=\"card-stacked\">\r\n//               <div className=\"card-content\">\r\n//                 {/* Pokemon name */}\r\n//                 <div className=\"form-group\">\r\n//                   <label htmlFor=\"name\">Nom</label>\r\n//                   <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange}></input>\r\n//                 </div>\r\n//                 {/* Pokemon hp */}\r\n//                 <div className=\"form-group\">\r\n//                   <label htmlFor=\"hp\">Point de vie</label>\r\n//                   <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange}></input>\r\n//                 </div>\r\n//                 {/* Pokemon cp */}\r\n//                 <div className=\"form-group\">\r\n//                   <label htmlFor=\"cp\">Dégâts</label>\r\n//                   <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange}></input>\r\n//                 </div>\r\n//                 {/* Pokemon types */}\r\n//                 <div className=\"form-group\">\r\n//                   <label>Types</label>\r\n//                   {types.map(type => (\r\n//                     <div key={type} style={{marginBottom: '10px'}}>\r\n//                       <label>\r\n//                         <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\r\n//                         <span>\r\n//                           <p className={formatType(type)}>{ type }</p>\r\n//                         </span>\r\n//                       </label>\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"card-action center\">\r\n//                 {/* Submit button */}\r\n//                 <button type=\"submit\" className=\"btn\">Valider</button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </form>\r\n//   );\r\n// };\r\n   \r\n// export default PokemonForm;"]},"metadata":{},"sourceType":"module"}